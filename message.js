// –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ç–∏–ø–∞ "–°–æ–æ–±—â–µ–Ω–∏–µ"
function initMessage() {
    validateMessageForm();
    initFileUploadHandler();
}

function validateMessageForm() {
    const messageText = document.getElementById('message-text').value.trim();
    const fileInput = document.getElementById('message-file');
    const hasFile = fileInput.files.length > 0;
    
    const sendBtn = document.getElementById('send-message-btn');
    sendBtn.disabled = !(messageText || hasFile);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
function initFileUploadHandler() {
    const fileInput = document.getElementById('message-file');
    const fileInfo = document.getElementById('message-file-info');
    
    fileInput.addEventListener('change', async function(e) {
        const file = e.target.files[0];
        
        if (file) {
            const fileSizeMB = (file.size / (1024 * 1024)).toFixed(2);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
            if (file.size > 10 * 1024 * 1024) {
                fileInfo.innerHTML = '<span style="color: red;">‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 10 –ú–ë)</span>';
                e.target.value = '';
                validateMessageForm();
                return;
            }
            
            fileInfo.innerHTML = `‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: ${file.name} (${fileSizeMB} –ú–ë)...`;
            
            try {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Telegram
                const uploadResult = await uploadFileToServer(file);
                
                if (uploadResult.success) {
                    fileInfo.innerHTML = `
                        ‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Telegram!
                        <br><small>ID: ${uploadResult.fileInfo.fileId}</small>
                        <br><small><a href="${uploadResult.fileInfo.messageLink}" target="_blank">–û—Ç–∫—Ä—ã—Ç—å –≤ Telegram</a></small>
                    `;
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ data-–∞—Ç—Ä–∏–±—É—Ç
                    fileInput.setAttribute('data-telegram-file-info', JSON.stringify(uploadResult.fileInfo));
                    
                } else {
                    throw new Error(uploadResult.error);
                }
            } catch (error) {
                console.error('Upload error:', error);
                fileInfo.innerHTML = `<span style="color: red;">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}</span>`;
                e.target.value = '';
            }
        } else {
            fileInfo.innerHTML = '';
            fileInput.removeAttribute('data-telegram-file-info');
        }
        
        validateMessageForm();
    });
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
async function uploadFileToServer(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        
        reader.onload = async function(e) {
            try {
                showStatus('üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram...', 'loading');
                
                const response = await fetch('/api/telegram-upload', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        fileBase64: e.target.result,
                        fileName: file.name,
                        fileType: file.type
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showStatus('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Telegram!', 'success');
                    resolve(result);
                } else {
                    throw new Error(result.error);
                }
            } catch (error) {
                reject(error);
            }
        };
        
        reader.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
        reader.readAsDataURL(file);
    });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
async function getMessageData() {
    const fileInput = document.getElementById('message-file');
    const file = fileInput.files[0];
    let fileData = null;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞
    const telegramFileInfo = fileInput.getAttribute('data-telegram-file-info');
    if (telegramFileInfo) {
        fileData = JSON.parse(telegramFileInfo);
    }
    
    return {
        type: 'message',
        text: document.getElementById('message-text').value.trim(),
        file: fileData, // –¢–µ–ø–µ—Ä—å –∑–¥–µ—Å—å –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ Telegram
        completionMessage: document.getElementById('message-completion-text').value.trim() || null,
        timestamp: new Date().toISOString()
    };
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–æ—Ä–º—ã "–°–æ–æ–±—â–µ–Ω–∏–µ"
document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('message-text').addEventListener('input', validateMessageForm);
    
    document.getElementById('send-message-btn').addEventListener('click', async () => {
        const sendBtn = document.getElementById('send-message-btn');
        const originalText = sendBtn.textContent;
        
        sendBtn.disabled = true;
        sendBtn.textContent = 'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞...';
        
        try {
            const data = await getMessageData();
            if (data) {
                sendData(data);
            }
        } catch (error) {
            console.error('Error:', error);
            showStatus('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ', 'error');
        } finally {
            sendBtn.disabled = false;
            sendBtn.textContent = originalText;
        }
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    document.getElementById('toggle-message-completion').addEventListener('click', function() {
        const content = document.getElementById('message-completion-content');
        content.style.display = content.style.display === 'none' ? 'block' : 'none';
        this.textContent = content.style.display === 'none' ? 
            '+ –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏' : '- –°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ';
    });
});
