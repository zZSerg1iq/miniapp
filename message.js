// –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ç–∏–ø–∞ "–°–æ–æ–±—â–µ–Ω–∏–µ"
function initMessage() {
    validateMessageForm();
}

function validateMessageForm() {
    const messageText = document.getElementById('message-text').value.trim();
    const fileInput = document.getElementById('message-file');
    const hasFile = fileInput.files.length > 0;
    
    const sendBtn = document.getElementById('send-message-btn');
    sendBtn.disabled = !(messageText || hasFile);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
async function getMessageData() {
    const fileInput = document.getElementById('message-file');
    const file = fileInput.files[0];
    let fileData = null;
    
    if (file) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if (file.size > CONFIG.MAX_FILE_SIZE) {
                throw new Error(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º: ${CONFIG.MAX_FILE_SIZE / 1024 / 1024} –ú–ë`);
            }
            
            showStatus('üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞...', 'loading');
            
            // –î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º base64, –¥–ª—è –±–æ–ª—å—à–∏—Ö - –ø—Ä–æ—Å–∏–º —Å—Å—ã–ª–∫—É
            if (file.size <= CONFIG.MAX_BASE64_SIZE) {
                fileData = await uploadFileAsBase64(file);
                showStatus('‚úÖ –§–∞–π–ª –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω (base64)', 'success');
            } else {
                fileData = await getFileLinkFromUser(file);
                if (!fileData) {
                    throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª');
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
            showStatus(`‚ùå ${error.message}`, 'error');
            return null;
        }
    }
    
    return {
        type: 'message',
        text: document.getElementById('message-text').value.trim(),
        file: fileData,
        completionMessage: document.getElementById('message-completion-text').value.trim() || null,
        timestamp: new Date().toISOString()
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è base64 –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤)
async function uploadFileAsBase64(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = function(e) {
            resolve({
                name: file.name,
                type: file.type,
                size: file.size,
                data: e.target.result, // base64 –¥–∞–Ω–Ω—ã–µ
                encoding: 'base64',
                uploadedAt: new Date().toISOString()
            });
        };
        reader.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
        reader.readAsDataURL(file);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤)
async function getFileLinkFromUser(file) {
    return new Promise((resolve) => {
        const fileInfo = `–§–∞–π–ª: ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} –ú–ë)`;
        
        showStatus(`
üìé ${fileInfo}

–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏. 

–í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è:
1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ –æ–±–ª–∞–∫–æ (Google Drive, Dropbox, Yandex Disk)
2. –ü–æ–ª—É—á–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
3. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ
        `, 'warning');

        setTimeout(() => {
            const fileUrl = prompt(`${fileInfo}\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª:`);
            
            if (fileUrl && fileUrl.startsWith('http')) {
                resolve({
                    name: file.name,
                    type: file.type,
                    size: file.size,
                    url: fileUrl,
                    encoding: 'external_url',
                    uploadedAt: new Date().toISOString()
                });
            } else if (fileUrl) {
                showStatus('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ http:// –∏–ª–∏ https://', 'error');
                resolve(null);
            } else {
                showStatus('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', 'error');
                resolve(null);
            }
        }, 1000);
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–æ—Ä–º—ã "–°–æ–æ–±—â–µ–Ω–∏–µ"
document.addEventListener('DOMContentLoaded', function() {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
    document.getElementById('message-text').addEventListener('input', validateMessageForm);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    document.getElementById('message-file').addEventListener('change', function(e) {
        const file = e.target.files[0];
        const fileInfo = document.getElementById('message-file-info');
        
        if (file) {
            const fileSizeMB = (file.size / (1024 * 1024)).toFixed(2);
            if (file.size > CONFIG.MAX_FILE_SIZE) {
                fileInfo.innerHTML = `<span style="color: red;">‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. ${CONFIG.MAX_FILE_SIZE / 1024 / 1024} –ú–ë)</span>`;
                e.target.value = '';
            } else {
                fileInfo.innerHTML = `‚úÖ –§–∞–π–ª: ${file.name} (${fileSizeMB} –ú–ë)`;
                
                // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                if (file.size > CONFIG.MAX_BASE64_SIZE) {
                    fileInfo.innerHTML += `<br><small style="color: orange;">‚ö†Ô∏è –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª</small>`;
                }
            }
        } else {
            fileInfo.innerHTML = '';
        }
        validateMessageForm();
    });
    
    // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    document.getElementById('send-message-btn').addEventListener('click', async () => {
        const sendBtn = document.getElementById('send-message-btn');
        const originalText = sendBtn.textContent;
        
        sendBtn.disabled = true;
        sendBtn.textContent = 'üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...';
        
        try {
            const data = await getMessageData();
            if (data) {
                sendData(data);
            }
        } catch (error) {
            console.error('Error:', error);
            showStatus('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
        } finally {
            sendBtn.disabled = false;
            sendBtn.textContent = originalText;
        }
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    document.getElementById('toggle-message-completion').addEventListener('click', function() {
        const content = document.getElementById('message-completion-content');
        content.style.display = content.style.display === 'none' ? 'block' : 'none';
        this.textContent = content.style.display === 'none' ? 
            '+ –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏' : '- –°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ';
    });
});
